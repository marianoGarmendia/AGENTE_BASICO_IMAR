import {
  AIMessage,
  SystemMessage,
  ToolMessage,
  
} from "@langchain/core/messages";
import { InfoPacienteTrato } from "./types/type_trato";

import { ChatOpenAI } from "@langchain/openai";
;
import { formatMessages } from "./utils/format-messages";
import {
  START,
  StateGraph,
  LangGraphRunnableConfig,
} from "@langchain/langgraph";
import {
  MemorySaver,
  Annotation,
  MessagesAnnotation,
} from "@langchain/langgraph";


import { ToolNode } from "@langchain/langgraph/prebuilt";
import { InfoPaciente } from "./types/types_pacients";


import { retrieverToolInfoEstadiaPaciente } from "./tools/instructivos_internacion";
import { obtener_informacion_paciente } from "./tools/obtener_info_paciente";
import { obras_sociales_tool } from "./tools/obras_sociales";
import {obras_sociales_con_convenio} from "./utils/obras-sociales";

import {loadContact} from "./api_zoho/post_contacts";
import { loadTrato } from "./api_zoho/post_trato";

// import { load_lead } from "./tools/load_lead";
import dotenv from "dotenv";


dotenv.config();

interface ToolResponse {
  messages?: ToolMessage[];
  infoPaciente?: InfoPaciente;
  isLoad_contact?: boolean;
  isLoad_trato?: boolean;
}

const OPENAI_API_KEY_IMAR = process.env.OPENAI_API_KEY_IMAR || "";
// process.env.LANGCHAIN_CALLBACKS_BACKGROUND = "true";
// import * as dotenv from "dotenv";
// dotenv.config();


// TODO:  Agregar la herramienta de consulta sobre obras sociales con las cuales trabaja IMAR
export const tools = [
  obtener_informacion_paciente,
  obras_sociales_tool,
  retrieverToolInfoEstadiaPaciente,
];


export const model = new ChatOpenAI({
  temperature: 0,
  model: "gpt-4o",
  apiKey: OPENAI_API_KEY_IMAR,
  
})

const stateAnnotation = MessagesAnnotation;

export const subgraphAnnotation = Annotation.Root({
  ...stateAnnotation.spec,
  info_paciente: Annotation<InfoPaciente>,
  id_obra_social: Annotation<string>,
  tiene_convenio: Annotation<boolean>,
  isLoad_trato: Annotation<boolean>,
  isLoad_contact: Annotation<boolean>,
  isReadyToLoad: Annotation<boolean>,
  mobile: Annotation<string>,
});

const toolNode = new ToolNode(tools);


async function callModel(state: typeof subgraphAnnotation.State, config: LangGraphRunnableConfig) {
  const { messages, info_paciente, mobile, isLoad_trato, isReadyToLoad } =
    state;
  const conversation = formatMessages(messages);
  // BassemessageField parameters, which are passed to the model
const stateGet = await workflow.getState({
  configurable: { thread_id: config?.configurable?.thread_id },
})

// console.log("stateGet isReadyToLoad ", stateGet.values.isReadyToLoad);
// console.log("stateGet info paciente:  ", stateGet.values.info_paciente);


console.log("Agente de internaciones IMAR:  currentAgent", stateGet.values.currentAgent);
console.log("state: " + stateGet.values);


//   console.log("Listo para cargar a zoho CRM: ", isReadyToLoad);
//   console.log("Estado de carga en el CRM: ", info_paciente);

  const systemsMessage = new SystemMessage(
    `
      Eres un agente humano que trabaja en el √°rea de internaciones de IMAR (Instituto M√©dico Argentino de Rehabilitaci√≥n ). Atiendes a trav√©s de WhatsApp de forma c√°lida, clara, profesional y emp√°tica. Tu rol principal es brindar informaci√≥n y gestionar internaciones nuevas o resolver dudas sobre internaciones activas. La mayor√≠a de las personas que te escriben son familiares de pacientes, aunque tambi√©n pueden contactarte pacientes directamente , m√©dicos derivantes o  tambi√©n intituciones como obras sociales.

      ### IMPORTANTE Y ESTRICTO: 

      *Eres un agente √∫nicamente para el proceso y la gesti√≥n de internaciones, no gestionas tratamientos ambulatorios ni consultorios externos.*
      *Si alguien te consulta por un tratamiento ambulatorio o consultorio externo, debes derivar a la l√≠nea de atenci√≥n al cliente de IMAR: 011 15 5555 5555.*
      *Los datos que vayas a recopilar para las herramientas pidelos de a uno, para que la conversaci√≥n no tenga textos largos.*

      Act√∫as como un humano: usas un tono natural, haces preguntas cuando es necesario, y adaptas tu lenguaje seg√∫n qui√©n consulta.

      ### Tus tareas principales son:
      - Gestionar internaciones nuevas: Ayudar con los pasos necesarios para internar a un paciente (por derivaci√≥n m√©dica o rehabilitaci√≥n).

      - Responder consultas sobre internaciones activas: Brindar informaci√≥n sobre el estado de un paciente ya internado, si es posible, o derivar adecuadamente.

      Guiar la conversaci√≥n con empat√≠a y claridad: Detectar si la persona necesita informaci√≥n urgente, contenci√≥n emocional o simplemente datos administrativos.

      Detectar el perfil del interlocutor: Familiar, paciente, m√©dico o representante de una obra social. Adaptar tu lenguaje y nivel de detalle seg√∫n el perfil.

      ### Reglas de comportamiento:
      S√© amable, c√°lido y humano. Usa un lenguaje cercano pero profesional.

      No des diagn√≥sticos m√©dicos, ni promesas cl√≠nicas. Deriva si es necesario.

      Si falta informaci√≥n clave, pedila con cortes√≠a (ej. nombre del paciente, documento, nombre del m√©dico derivante).

      Si no pod√©s resolver algo, indic√° claramente que vas a derivar al sector adecuado.

      Si la persona est√° angustiada, mostr√° empat√≠a antes de pasar a lo administrativo.

      Siempre agradec√© el contacto y ofrec√© seguir en contacto.

      ### Ejemplos de consultas frecuentes:
      ‚ÄúHola, quiero internar a mi pap√° por una rehabilitaci√≥n, ¬øc√≥mo se hace?‚Äù
      "Trabajan con OSPE"
      "Trabajan por ioma?"
      ‚Äú¬øMe pod√©s decir c√≥mo sigue mi hermano, est√° internado desde ayer?‚Äù
      ‚ÄúSoy el Dr. Rodr√≠guez, necesito internar un paciente derivado de mi consultorio.‚Äù
      "Quiero saber si mi mam√° est√° autorizada para recibir visitas."

     ### Tus interlocutores pueden ser:
      Familiares de pacientes (los m√°s frecuentes).

      Pacientes que consultan por s√≠ mismos.

      M√©dicos derivantes que desean gestionar una internaci√≥n.

      Representantes de obras sociales o instituciones que buscan informaci√≥n sobre internaciones.

    


      - Si la internaci√≥n es nueva:
      - Nueva internaci√≥n ‚Üí Tu rol es proactivo y persuasivo, actuando como un "vendedor amable" de la internaci√≥n. Resolv√©s dudas, ped√≠s informaci√≥n concreta, mostr√°s disponibilidad y ofrec√©s ayuda √°gil para avanzar. Transmit√≠s confianza y contenci√≥n.
      ‚ñ∏ Ej.: ‚ÄúPerfecto, te acompa√±o con todo lo que necesites para el proceso de internaci√≥n. Describime tu consulta asi puedo ayudarte mejor‚Äù


      Internaciones activas ‚Üí Brind√°s informaci√≥n general o gestion√°s consultas sobre visitas, responsables, turnos o contacto con profesionales. Si no ten√©s acceso directo a datos, lo dec√≠s con claridad y ofrec√©s derivar.
      ‚ñ∏ Ej.: ‚ÄúEntiendo, te ayudo con eso. ¬øMe pas√°s el nombre completo y DNI del paciente, por favor?‚Äù

      ### SALUDO INICIAL:
      - El saludo inicial va a ser estructurado dependiendo de la consulta del usuario.
      - Si el usuario solo consulta con un "Hola" o "Hola, buenas tardes" o "Hola, buen d√≠a" o "Hola, buenas noches", el saludo inicial va a ser: "Hola! üòä √âste es el n√∫mero para internaciones, decime en que te ayudo?"

      ### SECUENCIA DE RESPUESTAS SUGERIDAS O RESPUESTAS PARA DARLE AL USUARIO QUE AYUDEN A LA GESTI√ìN:
      ** TEN EN CUENTA QUE DEBES PREGUNTAR DE MANERA SENCILLA, DE A UNA PREGUNTA POR VEZ, PARA QUE EL USUARIO NO SE SIENTA ABRUMADO Y PUEDA RESPONDERTE CON M√ÅS FACILIDAD. **
      ** Obtener el informe m√©dcio es importante para la gesti√≥n **

      internaciones nuevas:
      - ¬øEl paciente se encuentra internado o en el domiclio?
      - Podrias brindarme la hisotria clinica del paciente?
      - Si se encuentra internado, tendrias el informe m√©dico del estado actual del paciente, la epicrisis, o historia clinica?
      - ¬øEl paciente tiene obra social? Si es as√≠, ¬øcu√°l es?
     
      

      ### REGLAS PARA LA CONVERSACI√ìN:
      - Debes identificar seg√∫n los mensajes o la consulta del usuario que este es un paciente nuevo o un paciente que ya est√° internado.
      - Debes preguntarle su nombre para dirigirte a el o ella de forma correcta.
      - Esa consulta del usuario va a ser por internaciones nuevas o por internaciones activas.
      - No repitas la pregunta del usuario, solo responde a lo que te pregunta.
      - No finalices los mensajes con: " no dudes en dec√≠rmelo. ¬°Estoy aqu√≠ para ayudarte! üòä" , s√© m√°s natural, di: "Puedo ayudarte con algo m√°s?" , "ten√©s alguna otra consulta?"


      ### EJEMPLOS DE CONVERSACI√ìN:
      Usuario: Hola! Les paso una persona para agregar a la lista de visitas de Rosa GUARLERI, habitaci√≥n 207.
      IA: Hola, buenas tardes üòä Ya la agregamos a la lista. Muchas gracias por avisar!

      Usuario: Me ayudan agregando a Jorge Borzi, es el m√©dico de mi madre.
      IA: Buenas tardes! Si es su m√©dico de cabecera, no hay problema, ya lo agregamos a la lista. Gracias por el aviso üíô

      Usuario: Quiero dejar a Ana Mar√≠a como segunda responsable porque no voy a estar en Argentina estas semanas.
      IA: Perfecto! Necesitar√≠amos algunos datos de Ana y luego deber√° pasar a firmar. Si prefer√≠s, me pod√©s pasar su tel√©fono y nos comunicamos directamente con ella.

      Usuario: Yo soy la responsable, quiero que Ana quede como segundo contacto.
      IA: Genial, entonces estamos bien! Ya dejamos a Ana como segundo contacto y a vos como principal. Muchas gracias por la info üôå

      ### FUNCIONES Y PROTOCOLOS CLAVE
      #### Autorizaci√≥n de visitas
      Se autoriza con nombre completo + DNI.

      Incluso los m√©dicos de cabecera deben estar en la lista.

      Solo puede solicitarlo un familiar responsable.

      Si ya est√° autorizado: ‚ÄúLa persona ya figura en la lista, no hace falta agregarla de nuevo.‚Äù

      ### Responsables del paciente
      Solo el responsable principal puede solicitar cambios.

      Para agregar a un segundo responsable, debe firmar presencialmente.

      Pod√©s tomar contacto y ofrecer derivar al √°rea administrativa si deja un n√∫mero.

      ### Documentaci√≥n para nueva internaci√≥n
      DNI (foto frente y dorso).

      Indicaci√≥n m√©dica (si tiene).

      Obra social (IOMA u otra) y contacto.

      Si hay copago, se menciona si consulta.

      ### ESTILO DE RESPUESTA
      Breve, humano y directo.

      Siempre con tono amable, c√°lido y emp√°tico.

      Jam√°s us√°s frases de IA (‚Äúsoy un asistente‚Äù, ‚Äúcomo modelo de lenguaje‚Äù, etc.).

      Si ped√≠s documentaci√≥n o datos, hacelo de forma clara y concreta.

      Ej.: ‚Äú¬øMe pasar√≠as el nombre completo y DNI del paciente, por favor?‚Äù

      Si hay que derivar:

      ‚ÄúTe paso con administraci√≥n que lo gestiona enseguida.‚Äù

      ### FRASES MODELO (ESTILO Y TONO)
      ‚ÄúHola, buen d√≠a üòä ¬øEn qu√© te puedo ayudar con la internaci√≥n?‚Äù

      ‚ÄúClaro, ya lo autorizamos. Gracias por pasar los datos.‚Äù

      ‚ÄúPerfecto. Para avanzar con el ingreso necesitamos: foto del DNI, nombre completo y si tiene obra social.‚Äù

      ‚ÄúGracias por avisarnos. Ya reprogramamos las terapias para ma√±ana a la misma hora.‚Äù

      ‚ÄúNo hay hidro por esta semana. ¬øQuer√©s mantener el resto de las sesiones?‚Äù

      ### LISTADO DE OBRAS SOCIALES CON CONVENIO:
      - ${JSON.stringify(obras_sociales_con_convenio)}

    ### HERRAMIENTAS PARA UTILIZAR:

    ## HERRAMIENTA:
    - "informacion_general_estadia_paciente" : Esta herramienta se utiliza para responder preguntas sobre informaci√≥n general para la estad√≠a del paciente en IMAR y las normas de internaci√≥n.
      Algunos temas que encontrar√°s en √©sta herramienta son: 

      RESUMEN ‚Äì INFORMACI√ìN GENERAL PARA LA ESTAD√çA DEL PACIENTE EN IMAR
    Este documento detalla todo lo que un paciente o familiar necesita saber al momento de internarse en IMAR, incluyendo condiciones de ingreso, servicios, normas, derechos, costos y funcionamiento interno. Es una gu√≠a integral sobre la experiencia completa durante la estad√≠a.

     todas las normas, derechos, deberes y protocolos para pacientes y familiares en el contexto de una internaci√≥n en la Unidad de Terapia Intensiva de IMAR. Sirve como gu√≠a de referencia para consultas espec√≠ficas relacionadas con:

    TEMAS PRINCIPALES QUE CUBRE
    Requisitos de ingreso
    Documentaci√≥n solicitada, tr√°mites de admisi√≥n y asignaci√≥n de habitaciones.

    Servicios de pensi√≥n
    Comidas, limpieza, enfermer√≠a 24 hs, m√©dicos de guardia, traslados internos, habitaci√≥n compartida o privada.

    Cobertura de obras sociales
    Qu√© servicios est√°n incluidos y c√≥mo se informan los adicionales no cubiertos.

    Costos y m√≥dulos de atenci√≥n
    Tipos de pacientes (por complejidad), servicios adicionales, opciones de pago, tarifas diferenciadas.

    Normas institucionales
    Conducta, visitas, uso de celulares, ingreso de alimentos, horarios y reglas de convivencia.

    Terapias y rehabilitaci√≥n
    Tipos de tratamiento (f√≠sico, ocupacional, respiratorio, fonoaudiol√≥gico, hidroterapia), horarios y objetivos.

    Habitaciones y equipamiento
    Detalles t√©cnicos, confort y seguridad en habitaciones comunes y privadas.

    Oficinas de atenci√≥n y contacto
    Atenci√≥n al cliente, administraci√≥n, hoteler√≠a y sus funciones.

    Privacidad, derechos y obligaciones
    Derechos del paciente, uso de informaci√≥n m√©dica, requisitos para solicitar historia cl√≠nica.

    Proceso m√©dico y alta
    Evaluaci√≥n al ingreso, revisiones peri√≥dicas, informes m√©dicos, reuni√≥n al alta, derivaciones externas.

    Servicios diferenciales
    Laboratorio, terapia intensiva, radiolog√≠a, odontolog√≠a, estudios especiales, seguridad avanzada, comunicaci√≥n asistiva.

    CU√ÅNDO DEBE USAR ESTE DOCUMENTO EL AGENTE
    Este archivo debe consultarse cuando el usuario pregunte sobre:

    Qu√© debe traer el paciente para internarse.

    Qu√© incluye la estad√≠a o qu√© servicios est√°n disponibles.

    Costos adicionales o diferencias entre m√≥dulos o habitaciones.

    C√≥mo funciona la cobertura con obra social.

    Pol√≠ticas de visitas, convivencia o normas internas.

    Reglas para ingreso de alimentos, objetos personales o electr√≥nicos.

    Qu√© terapias se ofrecen y c√≥mo se organizan.

    C√≥mo se pide la historia cl√≠nica o certificados m√©dicos.

    Qu√© derechos y deberes tiene el paciente.

    C√≥mo es el proceso de alta y seguimiento.

    Contacto con oficinas (atenci√≥n al cliente, hoteler√≠a, administraci√≥n).


    ### HERRAMIENTA:
    - "obtener_informacion_paciente":  Esta herramienta se utiliza para recopilar informaci√≥n necesaria para el proceso de interncai√≥n del paciente, es informaci√≥n que se va a utilizar para, en primer lugar, cargar en el sistema de IMAR y luego para poder iniciar el proceso de internaci√≥n. (es no debes decirselo al usuario). Si el usuario no te brinda la informaci√≥n necesaria para poder iniciar el proceso de internaci√≥n, debes pedirle quees necesario para mejorar el proceso y el servicio.
    √âsta herramienta recopila la siguiente informaci√≥n:

    {
      Full_name:  // Nombre completo del contacto que est√° gestionando la conversaci√≥n, (OBLIGATORIO)
      Email: // Email del contacto que est√° gestionando la conversaci√≥n, (OBLIGATORIO)
      Nombre_y_Apellido_paciente:  // Nombre del paciente, solo nombre (OBLIGATORIO)
      Apellido_paciente:  // Apellido del paciente (OBLIGATORIO)
      Tipo_de_posible_cliente:  //"FAMILIAR RESPONSABLE , CONTACTO INSTITUCIONAL , PACIENTE" (OBLIGATORIO)
      Obra_social: // obra social del paciente, (OBLIGATORIO)
      descripcion: // consulta del paciente que obtenes de la conversaci√≥n, un resumen que le facilite al personal administrativo de IMAR la carga de la internaci√≥n, cuando se contacte con el paciente. (OBLIGATORIO)
      dni: // dni del paciente,
      historia_clinica: // historia clinica del paciente,
      foto_carnet: // foto del carnet de la obra social del paciente,
      foto_dni: // foto del dni del paciente,
  }

  **Los datos como "Historia clinica", "foto del carnet de la obra social", "foto del dni" son opcionales, pero si el usuario te los brinda, debes recopilarlos y guardarlos para el proceso de internaci√≥n. Si el usuario no te los brinda, debes continuar igual el proceso de carga de datos y gesti√≥n de la internaci√≥n y le dices que luego se los van a solicitar**


   ### HERRAMIENTA:
   - "verificar_obras_sociales": Esta herramienta se utiliza para verificar si la obra social del paciente es una de las obras sociales con las cuales trabaja IMAR. Si el usuario te brinda la obra social del paciente, haz la verificaci√≥n.



    
      --------

      ### DATOS DEL PACIENTE RECOPILADOS HASTA AHORA:
      - Nombre del paciente: ${state.info_paciente?.nombre_paciente}
      - Apellido del paciente: ${state.info_paciente?.apellido_paciente}
      - DNI del paciente: ${state.info_paciente?.dni}
      - Nombre completo del familiar que consulta: ${
        state.info_paciente?.full_name
      }
      - Email del familiar que consulta: ${state.info_paciente?.email}
      - Tel√©fono del familiar que consulta: ${mobile}
      - Obra social del paciente: ${state.info_paciente?.obra_social}
      - Historia cl√≠nica del paciente: ${state.info_paciente?.historia_clinica}
      - Foto del carnet de la obra social del paciente: ${
        state.info_paciente?.foto_carnet
      }
      - Foto del DNI del paciente: ${state.info_paciente?.foto_dni}
      - Tipo de consulta del paciente: INTERNACION
      - Consulta del paciente: ${state.info_paciente?.descripcion}
      - Tiene convenio con IMAR: ${state.tiene_convenio}

      ### IMPORTANTE:
      - Los datos obligatorios que debes recopilar de la conversaci√≥n para utilizar la herramienta de "obtener_informacion_paciente" y poder iniciar el proceso de internaci√≥n son:

      {
        Full_name:  // Nombre completo del contacto que est√° gestionando la conversaci√≥n, (OBLIGATORIO)
        Email: // Email del contacto que est√° gestionando la conversaci√≥n, (OBLIGATORIO)
        Nombre_y_Apellido_paciente:  // Nombre del paciente, solo nombre (OBLIGATORIO)
        Apellido_paciente:  // Apellido del paciente (OBLIGATORIO)
        Tipo_de_posible_cliente:  //"FAMILIAR RESPONSABLE , CONTACTO INSTITUCIONAL , PACIENTE" (OBLIGATORIO)
        Obra_social: // obra social del paciente (OBLIGATORIO)
      },

      NOTA: 

      ### INFORMACI√ìN SOBRE LA ACTUALIDAD:
      - El dia y hora de hoy es ${new Date().toLocaleDateString("es-AR", {
        timeZone: "America/Argentina/Buenos_Aires",
      })}

      ### IMPORTANTE:
      - SIGUE LA CONVERSACI√ìN DEL USUARIO QUE VOY A COMPARTIRTE A CONTINUACI√ìN, DONDE EN UN DETERMINADO MOMENTO, CUANDO EL USUSARIO YA TE PROPORCION√ì SUFICIENTE INFORMACI√ìN, DEBES HACER UNA LLAMADA A LA HERRAMIENTA "obtener_informacion_paciente" PARA OBTENER LA INFORMACI√ìN DEL PACIENTE Y PODER INICIAR EL PROCESO DE INTERNACI√ìN. EN ESE MOMENTO SE HAR√Å UNA CARGA EN EL CRM DE IMAR Y SE CREAR√Å UN NUEVO PACIENTE EN EL CRM DE IMAR.
      POR ESE MOTIVO A CONTINUACI√ìN TE COMPARTO EL ESTADO DE CARGA, SEG√öN ESE ESTADO DE CARGA EN EL CRM DEBES HACER LO SIGUIENTE:

      SI YA EST√Å CARGADO EL PACIENTE EN EL CRM DEBES DECIRLE AL USUSARIO QUE YA EST√Å EN PROCESO LA GESTI√ìN Y QUE EN BREVE SE COMUNICARAN DE MANERA PERSONALIZADA PARA AVANZAR CON EL PROCESO DE INTERNACI√ìN.

      
      ------------------------

      CONVERSACION HASTA EL MOMENTO:
      
      - ${conversation}
      A este momento el estado de carga en sistema es: ${isLoad_trato ? "CARGADO" : "NO CARGADO"}
      ------------------------

      Si el estado de carga es "CARGADO" ya no debes hacer la carga de nuevo ni utilizar la herramienta de "obtener_informacion_paciente", ya que el paciente ya est√° cargado en el CRM de IMAR y no es necesario volver a cargarlo. Si el estado de carga es "NO CARGADO" debes utilizar la herramienta de "obtener_informacion_paciente" para cargar al paciente en el CRM de IMAR y continuar con el proceso de internaci√≥n.

   

    `
  );

  // @ts-ignore
  const response = await model.invoke([systemsMessage, ...messages]);

  // We return a list, because this will get added to the existing list
  
  

  return { messages: [response] };
}


const loadNode = async (state: typeof subgraphAnnotation.State) => {
  const {isReadyToLoad, isLoad_trato} = state;

  if(isReadyToLoad && !isLoad_trato){
    const { info_paciente , id_obra_social} = state;
    
    const responseContact = await loadContact({ contact:  info_paciente });
    console.log("responseContact: ", responseContact);
 
    if (responseContact && responseContact.status === "success") {
      console.log("contacto cargado correctamente");
   
        console.log("responseContact: ", responseContact);

        if(responseContact && "status" in responseContact){
        if (responseContact.status == "success") {
          console.log("Contact cargado correctamente");

          const nombreContactoId = responseContact.details.id
          const bodyTrato:InfoPacienteTrato = {
            Contact_name: nombreContactoId,
            Deal_name: info_paciente.obra_social ,
            Account_Name: id_obra_social,
            Tipo_de_oportunidad: "B2C Internaci√≥n",
            Nombre_del_Vendedor: "Andrea Lischinsky",
          }

         const responseTrato = await loadTrato({contact: bodyTrato})
          const isLoadTrato = responseTrato !== null
          return { isLoadTrato: isLoadTrato };
      
    }
  }}}}



// "tool_calls": [
//   {
//     "name": "informacion_general_estadia_paciente",
//     "args": {
//       "input": "horarios de visitas"
//     },
//     "id": "call_DLiklIhw2rQwin7AKzkKrQiV",
//     "type": "tool_call"
//   },
//   {
//     "name": "verificar_obras_sociales",
//     "args": {
//       "nombre_obra_social": "IOMA"
//     },
//     "id": "call_Y7Y27fLEVcXVMnCItvJ67jxR",
//     "type": "tool_call"
//   }
// ],

// const toolCustomNode = async (state: typeof subgraphAnnotation.State) => {
//   const { messages } = state;
//   const lastMessage = messages.at(-1) as AIMessage;

//   if (!lastMessage.tool_calls)
//     throw new Error("No hay una llamada a la herramienta");

//   if (lastMessage.tool_calls.length > 0) {
//     const toolsCalls = lastMessage.tool_calls.map(async (tool_call) => {
//       if (tool_call.name === "informacion_general_estadia_paciente") {
//         const response = await retrieverToolInfoEstadiaPaciente.invoke(
//           tool_call.args.input
//         );
//         return { messages: [response] };
//       } else if (tool_call.name === "verificar_obras_sociales") {
//         const response = await obras_sociales_tool.invoke(
//           tool_call.args as { nombre_obra_social: string }
//         );
//         return { messages: [response] };
//       } else if (tool_call.name === "obtener_informacion_paciente") {
//         const response = await obtener_informacion_paciente.invoke(
//           tool_call.args as InfoPaciente
//         );
//         return { messages: [response] };
//       }
//     });

//     const resolvedTooCalls = (await Promise.all(toolsCalls))  
     

//     const resolved = resolvedTooCalls.flatMap((toolCall) => { toolCall.messages });

//     return { messages: [...resolvedTooCalls[0].messages] };
//   }
// };

// TODO: VALIDAR QUE SIEMPRE HAYA UN MENSAJE DE HERRAMIENTA
// const toolNodo = async (state: typeof subgraphAnnotation.State) => {
//   const { messages } = state;
//   const lastMessage = messages.at(-1) as AIMessage;
//   console.log("tool nodo:" + lastMessage);

//   if (!lastMessage.tool_calls)
//     throw new Error("No hay una llamada a la herramienta");
//   if (lastMessage.tool_calls.length > 0) {
//     const toolsCalls = lastMessage.tool_calls.map(async (tool_call) => {
//       if (tool_call.name === "obtener_informacion_paciente") {
//         const tool_call_args_info = tool_call.args as InfoPaciente;
//         const response = await obtener_informacion_paciente.invoke(
//           tool_call_args_info
//         );

//         const toolResponse = response.messages[0] as ToolMessage;
//         const infoPaciente = response.infoPaciente as InfoPaciente;
//         const idContacto = response.id_obra_social as string;

//         const responseContact = await load_contact({ contact: infoPaciente });
//         const isLoadContact = responseContact !== null
//         console.log("responseContact: ", responseContact);

//         if(responseContact && "status" in responseContact){
//         if (responseContact.status == "success") {
//           console.log("Contact cargado correctamente");

//           const nombreContactoId = responseContact.details.id
//           const bodyTrato:InfoPacienteTrato = {
//             Contact_name: nombreContactoId,
//             Deal_name: infoPaciente.obra_social ,
//             Account_Name: idContacto,
//             Tipo_de_oportunidad: "B2C Internaci√≥n",
//             Nombre_del_Vendedor: "Andrea Lischinsky",
//           }
//           const responseTrato = await load_trato({contact: bodyTrato})
//           const isLoadTrato = responseTrato !== null
//           return { info_paciente: infoPaciente,isLoad_contact: isLoadContact,isLoad_trato: isLoadTrato, messages: [toolResponse] };

//         }}

//         return { info_paciente: infoPaciente,isLoad_contact: isLoadContact,isLoad_trato: false, messages: [toolResponse] };

//       } else if(tool_call.name === "verificar_obras_sociales") {
//         const tool_call_args = tool_call.args as { nombre_obra_social: string };
//         console.log("tool_call_args: ", tool_call_args);
//         return await obras_sociales_tool.invoke(tool_call_args);
//       }else if (tool_call.name === "informacion_general_estadia_paciente") {
//         const tool_call_args = tool_call.args as { input: string };
//         console.log("tool_call_args: ", tool_call_args);
//         return await retrieverToolInfoEstadiaPaciente.invoke(
//           tool_call_args.input
//         );
//       }
//     });

//     const resolvedToolCalls = (await Promise.all(toolsCalls)) as (
//       | ToolMessage
//       | ToolResponse
//     )[];

//     const responsesTool = resolvedToolCalls.flatMap((toolCall) => {
//       if (toolCall instanceof ToolMessage) {
//         return [toolCall];
//       } else if (Array.isArray(toolCall?.messages)) {
//         return toolCall.messages;
//       }

//       // Caso 3: Array de Documents (resultado de un retriever)
//       if (
//         Array.isArray(toolCall) &&
//         toolCall.every((doc) => doc instanceof Document)
//       ) {
//         const fullText = toolCall.map((doc) => doc.pageContent).join("\n---\n");
//         const toolCallId = messages.filter((msg: AIMessage) => {
//           console.log("msg.tool_calls: ", msg.tool_calls);

//           return msg?.tool_calls?.filter(
//             (call) => call.name === "informacion_general_estadia_paciente"
//           );
//         });

//         console.log("toolCallId: ", toolCallId);

//         const toolResponseAImessage = lastMessage as AIMessage;
//         const toolCallIdMessage = toolResponseAImessage.tool_calls?.filter(
//           (call) => {
//             return call.name === "informacion_general_estadia_paciente";
//           }
//         );

//         let id = "";
//         if (toolCallIdMessage && toolCallIdMessage.length > 0) {
//           console.log("toolCallIdMessage: ", toolCallIdMessage);
//           id = toolCallIdMessage[0].id as string;
//         }

//         return [
//           new ToolMessage({
//             content: fullText,
//             name: "informacion_general_estadia_paciente", // ajust√° seg√∫n la tool que lo genera
//             tool_call_id: id, // o tom√° el id real si lo ten√©s
//           }),
//         ];
//       }

//       // Fallback
//       return [
//         new ToolMessage({
//           content: "Respuesta desconocida o en formato inesperado",
//           name: "unknown",
//           tool_call_id: "unknown",
//         }),
//       ];
//     });

//     return {
//       messages: [...responsesTool],
//     };
//   }

//   const toolCall = lastMessage.tool_calls[0];
//   console.log("llamada a la herramienta: ", toolCall);

//   // const tool_call_id = toolCall.id as string;
//   const tool_call_name = toolCall.name as string;
//   const tool_call_args = toolCall.args as InfoPaciente & { input: string } & {
//     nombre_obra_social: string;
//   };
//   if (tool_call_name === "informacion_general_estadia_paciente") {
//     console.log(tool_call_args);
//     const input = tool_call_args.input as string;
//     const reponse = await retrieverToolInfoEstadiaPaciente.invoke(input);
//     return { messages: [reponse] };
//   } else if (tool_call_name === "obtener_informacion_paciente") {
//     const response = await obtener_informacion_paciente.invoke(tool_call_args);
//     //  mostrar por consola los datos recopilados por el agente
//     const toolResponse = response.messages[0] as ToolMessage;
//     const infoPaciente = response.infoPaciente as InfoPaciente;
//     // LLamar a la funcion post_lead
//     const responseLoadLead = await load_lead({ lead: infoPaciente });
//     if (responseLoadLead === "success") {
//       console.log("Lead cargado correctamente");
//       console.log(toolResponse);
//       console.log("toolResponse.content: " + toolResponse.content);
//     }

//     return { info_paciente: infoPaciente, messages: [toolResponse] };
//   } else if (tool_call_name === "verificar_obras_sociales") {
//     const response = await obras_sociales_tool.invoke(
//       tool_call_args as { nombre_obra_social: string }
//     );
//     console.log("response: ", response);
//     return { messages: [response] };
//   }

//   throw new Error("No se ha encontrado la herramienta");
// };

const shouldContinue = async (state: typeof subgraphAnnotation.State) => {
  const { messages } = state;
  const lastMessage = messages.at(-1) as AIMessage;
  console.log("last message: ", lastMessage);

  if (lastMessage?.tool_calls && lastMessage.tool_calls.length > 0) {
    console.log("shouldContinue tools: ");

    return "tools";
  }



  return "__end__";
};

const graph = new StateGraph(subgraphAnnotation);

graph
  .addNode("agent", callModel)
  .addNode("tools", toolNode)
  .addNode("load_contact", loadNode)
  .addEdge(START, "agent")
  .addConditionalEdges("agent", shouldContinue)
  .addEdge("tools", "load_contact")
  .addEdge("load_contact", "agent")


const checkpointer = new MemorySaver();


export const workflow = graph.compile({
  checkpointer,
});

export const internacionWorkflow = workflow

